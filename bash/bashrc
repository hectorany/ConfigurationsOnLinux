#* .bashrc
##########

# It is safe to source .bashrc more than one times.

[[ "$-" != *i* ]] && return

#** tty

#TERM=dtterm
TERMINFO=/usr/share/terminfo
stty erase ^?                   # kill ^U intr ^C eof ^D stop ^S
set -o ignoreeof                # do not logout while press ctrl + D
set -o emacs
shopt -s histappend
shopt -s histverify
#shopt -s autocd
shopt -s cdspell
#shopt -s dirspell
# shopt -q progcomp

PS1='\n\[\e[38;5;10m\][\!] \t \[\e[38;5;106m\]\u@\h'
PS1=$PS1' \[\e[38;5;33m\]\w'
PS1=$PS1'\n\[\e[32m\]\$\[\e[0m\] '


#** auto-completion

for each in bash_completion_tmux.sh bash-clearcase; do
    [ -f $HOME/.local/lib/$each ] && source $HOME/.local/lib/$each
done

#** alias

alias vi=vim
alias hex='od -Ax -tx1z -v'
alias ls='ls --color=auto'
alias ct='cleartool'
alias ll='ls -l --color=auto'
alias la='ls -la --color=auto'
alias grep='grep --color=auto'
alias crbox='tmux new -s sandbox'
alias sandbox='tmux att -t sandbox'
alias crbts='tmux new -s bts'
alias bts='tmux att -t bts'
alias libevent='tmux att -t libevent'

#** man pages
MANPATH=/home/hectorz/docs/codes/memcached-master/bin/share/man:$MANPATH

function tg {
    # Attach to a session. If it does not exist, create that session. If no
    # session name specified, prompt to choose one from existing ones.

    # A simple/naive replacement of this "bloated" function:
    # tmux -2 attach -t "$session_name" || tmux -2 new -s "$session_name"

    local usage="tg [-d] [session_name]"
    local detach_others=""

    while getopts "d" opt; do
        case $opt in
            d) detach_others="-d";;
            ?) echo $usage >&2;;
        esac
    done
    shift $((OPTIND - 1))

    local session_name="$1"

    if [ -n "$session_name" ]; then
        tmux -2 attach $detach_others -t "$session_name" \
            || tmux -2 new -s "$session_name"
        return
    fi

    # No session name specified, act according to the number of sessions
    local sessions=$(tmux list-sessions -F "#{session_name}")

    if [ -z "$sessions" ]; then
        tmux -2 new -s 'misc'
        return
    fi

    if [ $(echo "$sessions" | wc -l) -eq 1 ]; then
        tmux -2 attach $detach_others -t "$sessions"
        return
    fi

    # Multiple sessions, prompt to choose one

    local IFS=$'\n' # In case session names contain whitespaces. Must
                    # 'local' to NOT pollute the global 'IFS'.
                    # $'LITERAL_STR' => ansi-c quoting
    local PS3="Select a session: "

    select session_name in $sessions; do

        if [ -n "$session_name" ]; then # A valid choice
            tmux -2 attach $detach_others -t "$session_name"
            return
        else
            echo "Invalid index '$REPLY', please retry"
        fi

    done
}

function ep {
    # go to current emacs path (path of current buffer of emacs)
    cd $(emacsclient -e \
        '(with-current-buffer (window-buffer) default-directory)' \
        | tr -d '"')
}

#*** directory stack
alias cd='mycd'                 # overwrite builtin
alias dirs='dirs -v'
alias bd='pushd +1 >/dev/null'             # backward
alias fd='pushd -0 >/de/null'             # forward
function mycd {
    # pushd & cd behave differently when called without argument or with '-'.
    # Use this function as an adaptor.
    ## shopt pushdsilent not available in bash, redirect to /dev/null
    if [ -z "$1" ]; then
        builtin pushd ~ > /dev/null
    elif [ "$1" == "-" ]; then
        builtin pushd > /dev/null
    else
        builtin pushd "$@" > /dev/null
    fi

    # do some clean up
    builtin popd -n +11 >/dev/null 2>&1
    local index stored new_one
    new_one=$(builtin dirs +0)
    for index in {1..10}; do
        stored=$(builtin dirs +${index} 2>/dev/null)
        [ $? -eq 0 ] || break
        if [ "$stored" == "$new_one" ]; then
            popd -n +$index >/dev/null 2>&1
            break
        fi
    done
}

#*** directory bookmark from http://www.huyng.com

alias d0='alias g0="cd $(pwd)"'
alias d1='alias g1="cd $(pwd)"'
alias d2='alias g2="cd $(pwd)"'
alias d3='alias g3="cd $(pwd)"'
alias d4='alias g4="cd $(pwd)"'
alias d5='alias g5="cd $(pwd)"'
alias d6='alias g6="cd $(pwd)"'
alias d7='alias g7="cd $(pwd)"'
alias d8='alias g8="cd $(pwd)"'
alias d9='alias g9="cd $(pwd)"'
function lsdm {
    alias -p | grep -e "alias g[0-9]" | grep -v -e "alias d[0-9]=" \
        | sed 's/alias //'
}
function dumpdm {
    # dump directory marks
    alias -p | grep -e "alias g[0-9]" | grep -v -e "alias d[0-9]=" > ~/.dir_mark
}
function loaddm {
    if [ -r ~/.dir_mark ]; then
        source ~/.dir_mark
    fi
}

#** functions

#*** set window title. Without argument, restore to orignal one
function mytitle
{
    # usage: title [text]
    if [ -z "$ORG_PROMPT_COMMAND" ]; then
        # for bash: store system default
        ORG_PROMPT_COMMAND=$PROMPT_COMMAND
    fi

    if [ $# -gt 0 ]; then
        PROMPT_COMMAND="" # for bash
        echo -ne "\033]0;$1\007"
    else
        # restore system default # for bash
        PROMPT_COMMAND=$ORG_PROMPT_COMMAND
    fi
}
export mytitle

#** .inputrc stuff, BASH ONLY

# Usually, following settings are put into ~/.inputrc, with only stuff enclosed
# within single quotes kept. For me, I prefer to keep all stuff in one place.

bind 'set show-all-if-ambiguous on'
bind 'set completion-ignore-case on'
# double <esc> to cycle through possible completions
bind '"\e\e":menu-complete'

# like eshell, different from C-r and C-s
bind '"\ep": history-search-backward'
bind '"\en": history-search-forward'

bind '"\C-w":kill-region'

# should in profile, but who knows what's wrong with ct
if declare -f loaddm >/dev/null; then
    loaddm
fi

#export LS_COLORS='di=38;5;33'

export LC_CTYPE=zh_CN.utf8


function ccspace {
    # clearcase view disk space
    du -sh $(dirname $(ct lsview | grep $(id -un) |  sed -n '${s:[^/]*/:/:;p}'))
}
export -f ccspace

function ctw {
    # Clearcase view as Tmux Window name
    tmux rename-window "$(ct pwv|grep "Set view"|cut -d: -f2)"
}
export -f ctw

function cap {
    # Clearcase view's Absolute Path: a very simple wrapper which converts input
    # to the real one (the one under /view) so that emacs daemon started out of
    # current view can open it.

    CUR_DIR=$PWD
    target=$(readlink -f $1)
    \cd $(dirname $target)
    path_to_view=$(cleartool pwv | grep "Working directory" \
        | grep -v '\*\* NONE \*\*' | sed 's!.*: !/view/!')
    if [ -n "$path_to_view" ]; then
        # in case we are already in /view/xxxx, replace leading "/vob" only
        echo $target | sed "s:^/vob:$path_to_view/vob:"
    else
        echo "$target"
    fi
    \cd $CUR_DIR
}
export -f cap

function et {                  # ClearCase Emacsclient
    files=""
    for each in "$@"; do
        # TODO: deal with filenames contain whitespaces
        files="$files $(cap $each)"
    done
    emacsclient -a "" -t -- $files
}
export -f et

function cdiff {
    # Clearcase diff wrapper (for codestriker etc.)
    echo "$@" | xargs -n1 cleartool diff -serial_format -predecessor
}
export -f cdiff

function sm {
    clearmake -C GNU all SDM_PROD=DIST64
}
export -f sm

function tt {
    # Tmux Ttys
    tmux list-panes -a -F '#S:#I.#P #{pane_tty}'
}
export -f tt
export CVSROOT=':pserver:hanveng@135.252.41.254:/usr/local/cvsroot/Repository'

function cvsbts(){
    if [ -n "$1" ]
    then
        cvs co -r $1  TelicaRoot/build
        cvs co -r $1  TelicaRoot/components/data_collect
        cvs co -r $1  TelicaRoot/components/lynx/usr/include
        cvs co -r $1  TelicaRoot/components/oscommon
        cvs co -r $1  TelicaRoot/components/services/times10/include
        cvs co -r $1  TelicaRoot/components/table_defs
        cvs co -r $1  TelicaRoot/components/telica_common/inc
        cvs co -r $1  TelicaRoot/components/3rdParty/
        cvs co -r $1  TelicaRoot/components/signaling/mtss
        cvs co -r $1  TelicaRoot/components/signaling/sigcom
        cvs co -r $1  TelicaRoot/components/signaling/relay
        cvs co -r $1  TelicaRoot/components/signaling/tsm/tsmc/git_class.h
        cvs co -r $1  TelicaRoot/components/signaling/tsm/tsmc/tsc_tgp.h
        cvs co -r $1  TelicaRoot/components/signaling/cc/cc/cc.h
        cvs co -r $1  TelicaRoot/components/signaling/cc/cc/rt.h
        cvs co -r $1  TelicaRoot/components/signaling/cc/cc/srm.h
        cvs co -r $1  TelicaRoot/components/signaling/cc/tufs/common/h
        cvs co  GDI_Servers
  else
        cvs co  TelicaRoot/build
        cvs co  TelicaRoot/components/data_collect
        cvs co  TelicaRoot/components/lynx/usr/include
        cvs co  TelicaRoot/components/oscommon
        cvs co  TelicaRoot/components/services/times10/include
        cvs co  TelicaRoot/components/table_defs
        cvs co  TelicaRoot/components/telica_common/inc
        cvs co  TelicaRoot/components/3rdParty/
        cvs co  TelicaRoot/components/signaling/mtss
        cvs co  TelicaRoot/components/signaling/sigcom
        cvs co  TelicaRoot/components/signaling/relay
        cvs co  TelicaRoot/components/signaling/tsm/tsmc/git_class.h
        cvs co  TelicaRoot/components/signaling/tsm/tsmc/tsc_tgp.h
        cvs co  TelicaRoot/components/signaling/cc/cc/cc.h
        cvs co  TelicaRoot/components/signaling/cc/cc/rt.h
        cvs co  TelicaRoot/components/signaling/cc/cc/srm.h
        cvs co  TelicaRoot/components/signaling/cc/tufs/common/h
        cvs co GDI_Servers
    fi
}
alias cbts="cvsbts"
